### HackMerlin Agent – Project Write-Up

Overview
--------
I built an automated agent to solve the HackMerlin puzzle game.
The agent talks to Merlin, asks questions, collects his replies, and tries to guess the hidden password for each level.

- Level 1–2: Password is usually written directly (quoted or uppercase).
- Level 3–4: Password must be pieced together from hints (length, reversed word, first/last letters).
- The agent can also handle “Awesome job!” popups and continue to the next level.

How the Agent Works
-------------------
- **Playwright** → Automates the website (ask questions, read answers, submit passwords).
- **Hint Accumulator** → Stores important clues like length, first/last letters, uppercase tokens, and Q/A pairs.
- **LLM Agent** → If simple rules fail, uses a language model to combine all hints into one password.
- **Safe Listener** → Orchestrates the whole process for each level.

Improvements if Cost/Compute Was Unlimited
------------------------------------------
- Use a very strong LLM (like GPT-4) for every step.
- Ask many questions in parallel and merge answers.
- Train a custom model to recognize passwords from Merlin’s patterns.

Improvements for a Cost-Constrained Setup
-----------------------------------------
- Use regex + rules for Levels 1–3 (almost free).
- Only call the LLM once per level, not for every response.
- Run a small local model (like Llama) for cheap reasoning.
- Cache Merlin’s repeated responses to avoid wasted analysis.

Unique Challenges
-----------------
- **Inconsistent answers:** Sometimes uppercase, sometimes quoted, sometimes lowercase → solved with regex + cleaning.
- **Popups blocking progress:** Had to detect and click “Continue.”
- **Merlin stalling at Level 3:** Often repeats length → fixed by rephrasing questions.
- **Balancing rules and LLM:** Too much LLM caused random guesses, too little made the agent stuck → solved with a step-by-step fallback (rules → stitching → LLM → rephrase).

Conclusion
----------
The project shows how to combine simple rules and LLM reasoning to beat a resistant AI opponent.
With unlimited resources, the agent could become smarter and more flexible. With limited resources, it can still work well by focusing on rules and lightweight models.